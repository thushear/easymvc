package com.framework.jdbc;

import org.junit.After;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;
import org.springframework.dao.DataAccessException;
import org.springframework.jdbc.core.*;
import org.springframework.jdbc.core.namedparam.BeanPropertySqlParameterSource;
import org.springframework.jdbc.core.namedparam.MapSqlParameterSource;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;
import org.springframework.jdbc.core.namedparam.SqlParameterSource;
import org.springframework.jdbc.core.simple.SimpleJdbcInsert;
import org.springframework.jdbc.core.simple.SimpleJdbcTemplate;
import org.springframework.jdbc.datasource.DriverManagerDataSource;
import org.springframework.jdbc.object.SqlQuery;
import org.springframework.jdbc.support.rowset.SqlRowSet;

import java.sql.*;
import java.util.*;

/**
 * Created by thushear on 2015/8/31.
 */
public class JdbcTemplateTest {


    static JdbcTemplate jdbcTemplate ;


    @BeforeClass
    public static void setUpBeforeClass () {
        String hqldb = "jdbc:hsqldb:mem:test";
        String userName = "sa";
        String password = "";
        DriverManagerDataSource driverManagerDataSource = new DriverManagerDataSource(hqldb,userName,password);
        driverManagerDataSource.setDriverClassName("org.hsqldb.jdbcDriver");
        jdbcTemplate = new JdbcTemplate(driverManagerDataSource);
    }


    @Before
    public void setUp(){
        //id自增主键从0开始
        String createTableSql = "create memory table test" +
                "(id int GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, " +
                "name varchar(100))";
        jdbcTemplate.update(createTableSql);
        String createHsqldbFunctionSql =
                "CREATE FUNCTION FUNCTION_TEST(str VARCHAR(100)) " +
                        "returns INT begin atomic return length(str);end";

        jdbcTemplate.update(createHsqldbFunctionSql);

        String createHsqldbProcedureSql =
                "CREATE PROCEDURE PROCEDURE_TEST" +
                        "(INOUT inOutName VARCHAR(100), OUT outId INT) " +
                        "MODIFIES SQL DATA " +
                        "BEGIN ATOMIC " +
                        "  insert into test(name) values (inOutName); " +
                        "  SET outId = IDENTITY(); " +
                        "  SET inOutName = 'Hello,' + inOutName; " +
                        "END";
        jdbcTemplate.execute(createHsqldbProcedureSql);
        testInsert();
        //test();
    }



    @After
    public void tearDown(){
        jdbcTemplate.execute("DROP  FUNCTION  FUNCTION_TEST");
        jdbcTemplate.execute("DROP  PROCEDURE PROCEDURE_TEST");
        jdbcTemplate.execute("DROP TABLE test ");
    }




    @Test
    public void test(){
        String sql = "select * from INFORMATION_SCHEMA.SYSTEM_TABLES";
        jdbcTemplate.query(sql, new RowCallbackHandler() {
            @Override
            public void processRow(ResultSet rs) throws SQLException {
                String value = rs.getString("TABLE_NAME");
                System.out.printf("tableName = %s \n" , value);
            }
        });



    }



    @Test
   public void testCRUD(){
        testInsert();
        testSelect();
        System.out.println("===============");
        testUpdate();
        testSelect();
        System.out.println("===============");
        testDelete();
        testSelect();

   }



    public void testInsert(){
        jdbcTemplate.update("INSERT  INTO  test(name) values('name1')");
        jdbcTemplate.update("INSERT INTO test(name) values('name2')");
        Map map = jdbcTemplate.queryForMap("SELECT * FROM test where name = 'name1'");
        System.out.printf("map = %s \n" , map);
        int count = jdbcTemplate.queryForInt("SELECT count(1) FROM test");
        System.out.printf("count = %d \n " ,count );
    }




    public void testSelect(){
        jdbcTemplate.query("select * from test", new RowCallbackHandler() {
            @Override
            public void processRow(ResultSet rs) throws SQLException {
                System.out.printf( "id = %d  ," , rs.getInt("id"));
                System.out.printf("name = %s \n" , rs.getString("name"));
            }
        });
    }




    public void testUpdate(){
        jdbcTemplate.update("update test set name = 'name3' where name = ?" , new Object[]{"name1"});
    }


    public void testDelete(){
        jdbcTemplate.update("delete from test where name = ?" , new Object[]{"name2"});
    }




    @Test
    public void testPreparedStatement() {
        int count = jdbcTemplate.execute(new PreparedStatementCreator() {
                                 @Override
                                 public PreparedStatement createPreparedStatement(Connection con) throws SQLException {

                                     return con.prepareStatement("SELECT COUNT(1) FROM test");
                                 }
                             },
                new PreparedStatementCallback<Integer>() {
                    @Override
                    public Integer doInPreparedStatement(PreparedStatement ps) throws SQLException, DataAccessException {
                       ps.execute();
                       ResultSet resultSet = ps.getResultSet();
                        resultSet.next();
                        return resultSet.getInt(1);
                    }
                }
        );
        System.out.printf("count = %s \n" , count);
    }


    @Test
    public void testPrepareStatement2(){
        int update = jdbcTemplate.update("INSERT  INTO test(name) values(?)", new PreparedStatementSetter() {
            @Override
            public void setValues(PreparedStatement ps) throws SQLException {
                ps.setString(1,"name5");
            }
        });
        System.out.printf("update =  %d \n" , update);
        testSelect();
    }



    @Test
    public void testResultSet1() {
        List<Map>  list = jdbcTemplate.query("select * from test", new RowMapper<Map>() {


            @Override
            public Map mapRow(ResultSet rs, int rowNum) throws SQLException {
                Map map = new HashMap();
                map.put(rs.getInt(1), rs.getString(2));
                return map;
            }
        });

        System.out.printf("list = %s \n" , list);
    }



    @Test
    public void testResultSet2() {
        final List result = new ArrayList();

        jdbcTemplate.query("select * from test", new RowCallbackHandler() {
            @Override
            public void processRow(ResultSet rs) throws SQLException {
                Map map = new HashMap();
                map.put(rs.getInt("id"),rs.getString("name"));
                result.add(map);
            }
        });

        System.out.printf("result = %s \n" , result);
    }


    @Test
    public void testResultSet3(){
        List result  =  jdbcTemplate.query("select * from test", new ResultSetExtractor<List>() {

            @Override
            public List extractData(ResultSet rs) throws SQLException, DataAccessException {
                List result = new ArrayList();
                while (rs.next()){
                    Map map = new HashMap();
                    map.put(rs.getInt("id") , rs.getString("name"));
                    result.add(map);
                }

                return result;
            }
        });

        System.out.printf("result = %s \n" , result);
    }



    @Test
    public void testQueryFor(){

        int count = jdbcTemplate.queryForInt("select COUNT(1) from test");
        System.out.printf("count = %d \n" , count);

        Map<String, Object> map = jdbcTemplate.queryForMap("select * from test where id=0");
        System.out.printf("map = %s \n" , map);

        List<Map<String, Object>> list =  jdbcTemplate.queryForList("select * from test");
        System.out.printf("queryList = %s \n" , list);

        int count1 = jdbcTemplate.queryForObject("select count(1) from test", Integer.class);
        System.out.printf("count1 = %d \n" , count1);

        SqlRowSet sqlRowSet =  jdbcTemplate.queryForRowSet("select * from test");

        while (sqlRowSet.next()){
            System.out.printf("sqlRowSet = %s \n" , sqlRowSet.getInt(1) + ":" + sqlRowSet.getString(2) );

        }

    }



    @Test
    public void testNamedParamterJdbcTempate() {
        NamedParameterJdbcTemplate namedParameterJdbcTemplate = new NamedParameterJdbcTemplate(jdbcTemplate);
        Map<String,Object>  param = new HashMap<String, Object>();
        param.put("name","name7");
        String insertSql = "insert into test(name) values(:name)";
        namedParameterJdbcTemplate.update(insertSql, param);
        testSelect();


        namedParameterJdbcTemplate.query("select * from test where name = :name", param, new RowCallbackHandler() {
            @Override
            public void processRow(ResultSet rs) throws SQLException {
                System.out.printf("rs id = %s , name = %s \n" , rs.getInt(1) , rs.getString(2));
            }
        });

        namedParameterJdbcTemplate.update("delete from test where name = :name" , param);
        testSelect();

        SqlParameterSource  parameterSource = new MapSqlParameterSource(param);
        namedParameterJdbcTemplate.update(insertSql , parameterSource) ;
        testSelect();

        class Param {
            int id ;
            String name ;

            public int getId() {
                return id;
            }

            public void setId(int id) {
                this.id = id;
            }

            public String getName() {
                return name;
            }

            public void setName(String name) {
                this.name = name;
            }
        }

        Param param1 = new Param();
        param1.setName("name8");
        SqlParameterSource beanParam = new BeanPropertySqlParameterSource(param1);

        namedParameterJdbcTemplate.update(insertSql , beanParam);
        testSelect();
    }




    @Test
    public void testSimpleJdbcTemplate() {
        SimpleJdbcTemplate simpleJdbcTemplate = new SimpleJdbcTemplate(jdbcTemplate);
        simpleJdbcTemplate.update("insert into test(id,name) values(?,?)",10,"name21");
        testSelect();

        List<Map<String, Object>>  list =  simpleJdbcTemplate.queryForList("select * from test");
        System.out.printf("list = %s \n" , list);

        List<UserModel> userModelList = simpleJdbcTemplate.query("select * from test", new UserRowMapper());
        System.out.printf("userModelList = %s \n" , userModelList);

    }


    @Test
    public void testSqlQuery(){
        SqlQuery sqlQuery = new UserModelSqlQuery(jdbcTemplate);
        List<UserModel > list =  sqlQuery.execute("name1");
        System.out.printf("list = %s \n" , list);
    }

    @Test
    public void testSimpleInsert() {
        SimpleJdbcInsert insert = new SimpleJdbcInsert(jdbcTemplate);
        insert.withTableName("test");
        Map<String,Object> param = new HashMap<String, Object>();
        param.put("name","name22");
        insert.compile();
        insert.execute(param);
        testSelect();

        insert = new SimpleJdbcInsert(jdbcTemplate);
        insert.withTableName("test");
        insert.setGeneratedKeyName("id");
        param.put("name" , "name25");
        Number number =  insert.executeAndReturnKey(param);
        System.out.printf("number = %s \n" , number);
        testSelect();


        int[] batch = insert.executeBatch(new Map[] {param, param , param});
        System.out.printf("batch = %s \n" , Arrays.toString(batch));
        testSelect();
    }








}
class UserModel {
    int id ;
    String name ;

    public int getId() {
        return id;
    }

    public void setId(int id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    @Override
    public String toString() {
        return "UserModel{" +
                "id=" + id +
                ", name='" + name + '\'' +
                '}';
    }
}

class  UserRowMapper implements RowMapper<UserModel> {

    @Override
    public UserModel mapRow(ResultSet rs, int rowNum) throws SQLException {
        UserModel userModel = new UserModel();
        userModel.setId(rs.getInt("id"));
        userModel.setName(rs.getString("name"));
        return userModel;
    }
}

class UserModelSqlQuery extends SqlQuery<UserModel> {

    public UserModelSqlQuery(JdbcTemplate jdbcTemplate) {
        super.setJdbcTemplate(jdbcTemplate);
        super.setSql("select * from test where name = ?");
        super.declareParameter(new SqlParameter(Types.VARCHAR));
        compile();
    }

    @Override
    protected RowMapper<UserModel> newRowMapper(Object[] parameters, Map context) {
        return new UserRowMapper();
    }
}

